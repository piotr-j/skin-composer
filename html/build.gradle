gwt {
    gwtVersion = '2.9.0' // Should match the gwt version used for building the gwt backend
    maxHeapSize = "1G" // Default 256m is not enough for gwt compiler. GWT is HUNGRY
    minHeapSize = "1G"

    src = files(file("src/")) // Needs to be in front of "modules" below.
    modules 'com.ray3k.skincomposer.GdxDefinition'
    devModules 'com.ray3k.skincomposer.GdxDefinitionSuperdev'
    project.webAppDirName = 'webapp'

    logLevel = 'INFO'
    compiler.strict = true
    compiler.disableCastChecking = true
    compiler {
        strict = true
        disableCastChecking = true
    }
    sourceLevel = 11
}

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev

def HttpFileServer server = null
def httpFilePort = 8090

task startHttpServer() {
    dependsOn draftCompileGwt

    String output = project.buildDir.path + "/gwt/draftOut"

    doLast {
        copy {
            from "webapp"
            into output
        }

        copy {
            from "war"
            into output
        }

        server = new SimpleHttpFileServerFactory().start(new File(output), httpFilePort)
        println "Server started in directory " + server.getContentRoot() + ", http://localhost:" + server.getPort()
    }
}

task superDev(type: GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules

        println "Skin composer available at http://localhost:" + server.getPort() + "/index.html"
        println "It is strongly advised to run this from terminal not as task in IDEA, 'gradlew html:superDev'."
        println "When task is stopped in IDEA server is not stopped properly, preventing another start."
        println "To fix that jvm it created must be killed manually.\n"
    }
}

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        // we skip WEB-INF as we dont care about it when we dist
        copy {
            from "build/gwt/out/html"
            into "build/dist/html"
        }
        copy {
            from "webapp"
            into "build/dist"
        }
        copy {
            from "war"
            into "build/dist"
        }
    }
}

task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
    }
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)

sourceCompatibility = 1.11
sourceSets.main.java.srcDirs = ["src/"]